<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32F4xx-Nucleo-IKS01A2\Objects\STM32F4xx-Nucleo-IKS01A2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32F4xx-Nucleo-IKS01A2\Objects\STM32F4xx-Nucleo-IKS01A2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Sep 16 12:09:19 2019
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; FX_Data_Handler &rArr; MotionFX_manager_run &rArr; MotionFX_update &rArr; iNemo_quat2heading &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[136]">MotionFX_GetLibVersion</a>
 <LI><a href="#[133]">MotionFX_MagCal_getParams</a>
 <LI><a href="#[92]">MotionFX_MagCal_init</a>
 <LI><a href="#[93]">MotionFX_MagCal_run</a>
 <LI><a href="#[13a]">MotionFX_enable_6X</a>
 <LI><a href="#[13b]">MotionFX_enable_9X</a>
 <LI><a href="#[138]">MotionFX_getKnobs</a>
 <LI><a href="#[96]">MotionFX_initialize</a>
 <LI><a href="#[9a]">MotionFX_propagate</a>
 <LI><a href="#[a1]">MotionFX_setKnobs</a>
 <LI><a href="#[a2]">MotionFX_update</a>
 <LI><a href="#[af]">m_mldivide</a>
 <LI><a href="#[9e]">m_qmult_eml</a>
 <LI><a href="#[aa]">m_q2dcm_eml</a>
 <LI><a href="#[87]">MEMS_EmptyDataFrame</a>
 <LI><a href="#[86]">MEMS_DataBuffInit</a>
 <LI><a href="#[95]">MEMS_checkTimeToRun</a>
 <LI><a href="#[94]">updateProcBuffer_Temp</a>
 <LI><a href="#[89]">MEMS_getSensorData_I16</a>
 <LI><a href="#[ae]">m_dcm2q_eml</a>
 <LI><a href="#[a0]">SpacePointGyroProp</a>
 <LI><a href="#[a5]">quatErr2EulerErr</a>
 <LI><a href="#[97]">rt_InitInfAndNaN.isra.3</a>
 <LI><a href="#[83]">MEMSloadFromNVM.isra.10</a>
 <LI><a href="#[82]">MEMSLoadMagCalNVM</a>
 <LI><a href="#[85]">MEMSsaveInNVM.isra.11</a>
 <LI><a href="#[84]">MEMSSaveMagCalNVM</a>
 <LI><a href="#[8f]">llEvaluate.constprop.23</a>
 <LI><a href="#[98]">iNemo_setOrientation.constprop.40</a>
 <LI><a href="#[99]">iNemo_setOrientation_6X.constprop.41</a>
 <LI><a href="#[8c]">getMagStats.constprop.26</a>
 <LI><a href="#[8b]">MEMS_updateMagBufferIndex.constprop.24</a>
 <LI><a href="#[a6]">iNemo_quat2heading</a>
 <LI><a href="#[9f]">output_update</a>
 <LI><a href="#[88]">MEMS_runMagCal.constprop.14</a>
 <LI><a href="#[a9]">m_kalman_3gyro.isra.6.constprop.36</a>
 <LI><a href="#[a7]">SpacePointAlgorithm.isra.7</a>
 <LI><a href="#[a3]">iNemo_update_6X.constprop.34</a>
 <LI><a href="#[a4]">iNemo_update.constprop.35</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BusFault_Handler</a><BR>
 <LI><a href="#[22]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">UsageFault_Handler</a><BR>
 <LI><a href="#[23]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">SVC_Handler</a><BR>
 <LI><a href="#[25]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">PendSV_Handler</a><BR>
 <LI><a href="#[39]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[39]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[66]">BSP_GetTick</a> from nucleo_f401re_bus.o(i.BSP_GetTick) referenced from iks01a2_env_sensors.o(i.HTS221_0_Probe)
 <LI><a href="#[66]">BSP_GetTick</a> from nucleo_f401re_bus.o(i.BSP_GetTick) referenced from iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
 <LI><a href="#[63]">BSP_I2C1_DeInit</a> from nucleo_f401re_bus.o(i.BSP_I2C1_DeInit) referenced from iks01a2_env_sensors.o(i.HTS221_0_Probe)
 <LI><a href="#[63]">BSP_I2C1_DeInit</a> from nucleo_f401re_bus.o(i.BSP_I2C1_DeInit) referenced from iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
 <LI><a href="#[62]">BSP_I2C1_Init</a> from nucleo_f401re_bus.o(i.BSP_I2C1_Init) referenced from iks01a2_env_sensors.o(i.HTS221_0_Probe)
 <LI><a href="#[62]">BSP_I2C1_Init</a> from nucleo_f401re_bus.o(i.BSP_I2C1_Init) referenced from iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
 <LI><a href="#[64]">BSP_I2C1_ReadReg</a> from nucleo_f401re_bus.o(i.BSP_I2C1_ReadReg) referenced from iks01a2_env_sensors.o(i.HTS221_0_Probe)
 <LI><a href="#[64]">BSP_I2C1_ReadReg</a> from nucleo_f401re_bus.o(i.BSP_I2C1_ReadReg) referenced from iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
 <LI><a href="#[65]">BSP_I2C1_WriteReg</a> from nucleo_f401re_bus.o(i.BSP_I2C1_WriteReg) referenced from iks01a2_env_sensors.o(i.HTS221_0_Probe)
 <LI><a href="#[65]">BSP_I2C1_WriteReg</a> from nucleo_f401re_bus.o(i.BSP_I2C1_WriteReg) referenced from iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
 <LI><a href="#[21]">BusFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[36]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[51]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[52]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[53]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[54]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[55]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4a]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2]">HTS221_DeInit</a> from hts221.o(i.HTS221_DeInit) referenced 2 times from hts221.o(.data)
 <LI><a href="#[4]">HTS221_GetCapabilities</a> from hts221.o(i.HTS221_GetCapabilities) referenced 2 times from hts221.o(.data)
 <LI><a href="#[6]">HTS221_HUM_Disable</a> from hts221.o(i.HTS221_HUM_Disable) referenced 2 times from hts221.o(.data)
 <LI><a href="#[5]">HTS221_HUM_Enable</a> from hts221.o(i.HTS221_HUM_Enable) referenced 2 times from hts221.o(.data)
 <LI><a href="#[9]">HTS221_HUM_GetHumidity</a> from hts221.o(i.HTS221_HUM_GetHumidity) referenced 2 times from hts221.o(.data)
 <LI><a href="#[7]">HTS221_HUM_GetOutputDataRate</a> from hts221.o(i.HTS221_HUM_GetOutputDataRate) referenced 2 times from hts221.o(.data)
 <LI><a href="#[8]">HTS221_HUM_SetOutputDataRate</a> from hts221.o(i.HTS221_HUM_SetOutputDataRate) referenced 2 times from hts221.o(.data)
 <LI><a href="#[1]">HTS221_Init</a> from hts221.o(i.HTS221_Init) referenced 2 times from hts221.o(.data)
 <LI><a href="#[3]">HTS221_ReadID</a> from hts221.o(i.HTS221_ReadID) referenced 2 times from hts221.o(.data)
 <LI><a href="#[b]">HTS221_TEMP_Disable</a> from hts221.o(i.HTS221_TEMP_Disable) referenced 2 times from hts221.o(.data)
 <LI><a href="#[a]">HTS221_TEMP_Enable</a> from hts221.o(i.HTS221_TEMP_Enable) referenced 2 times from hts221.o(.data)
 <LI><a href="#[c]">HTS221_TEMP_GetOutputDataRate</a> from hts221.o(i.HTS221_TEMP_GetOutputDataRate) referenced 2 times from hts221.o(.data)
 <LI><a href="#[e]">HTS221_TEMP_GetTemperature</a> from hts221.o(i.HTS221_TEMP_GetTemperature) referenced 2 times from hts221.o(.data)
 <LI><a href="#[d]">HTS221_TEMP_SetOutputDataRate</a> from hts221.o(i.HTS221_TEMP_SetOutputDataRate) referenced 2 times from hts221.o(.data)
 <LI><a href="#[1f]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10]">LPS22HB_DeInit</a> from lps22hb.o(i.LPS22HB_DeInit) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[12]">LPS22HB_GetCapabilities</a> from lps22hb.o(i.LPS22HB_GetCapabilities) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[f]">LPS22HB_Init</a> from lps22hb.o(i.LPS22HB_Init) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[14]">LPS22HB_PRESS_Disable</a> from lps22hb.o(i.LPS22HB_PRESS_Disable) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[13]">LPS22HB_PRESS_Enable</a> from lps22hb.o(i.LPS22HB_PRESS_Enable) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[15]">LPS22HB_PRESS_GetOutputDataRate</a> from lps22hb.o(i.LPS22HB_PRESS_GetOutputDataRate) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[17]">LPS22HB_PRESS_GetPressure</a> from lps22hb.o(i.LPS22HB_PRESS_GetPressure) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[16]">LPS22HB_PRESS_SetOutputDataRate</a> from lps22hb.o(i.LPS22HB_PRESS_SetOutputDataRate) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[11]">LPS22HB_ReadID</a> from lps22hb.o(i.LPS22HB_ReadID) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[19]">LPS22HB_TEMP_Disable</a> from lps22hb.o(i.LPS22HB_TEMP_Disable) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[18]">LPS22HB_TEMP_Enable</a> from lps22hb.o(i.LPS22HB_TEMP_Enable) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[1a]">LPS22HB_TEMP_GetOutputDataRate</a> from lps22hb.o(i.LPS22HB_TEMP_GetOutputDataRate) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[1c]">LPS22HB_TEMP_GetTemperature</a> from lps22hb.o(i.LPS22HB_TEMP_GetTemperature) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[1b]">LPS22HB_TEMP_SetOutputDataRate</a> from lps22hb.o(i.LPS22HB_TEMP_SetOutputDataRate) referenced 2 times from lps22hb.o(.data)
 <LI><a href="#[20]">MemManage_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[28]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">PendSV_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4b]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[67]">ReadRegWrap</a> from hts221.o(i.ReadRegWrap) referenced from hts221.o(i.HTS221_RegisterBusIO)
 <LI><a href="#[69]">ReadRegWrap</a> from lps22hb.o(i.ReadRegWrap) referenced from lps22hb.o(i.LPS22HB_RegisterBusIO)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4e]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">SVC_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[29]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[22]">UsageFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[68]">WriteRegWrap</a> from hts221.o(i.WriteRegWrap) referenced from hts221.o(i.HTS221_RegisterBusIO)
 <LI><a href="#[6a]">WriteRegWrap</a> from lps22hb.o(i.WriteRegWrap) referenced from lps22hb.o(i.LPS22HB_RegisterBusIO)
 <LI><a href="#[61]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[5f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[81]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[160]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[161]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[162]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[163]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[164]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[165]"></a>___aeabi_memcpy$ret</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update.constprop.35
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update_6X.constprop.34
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
</UL>

<P><STRONG><a name="[139]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update.constprop.35
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update_6X.constprop.34
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update.constprop.35
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update_6X.constprop.34
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update.constprop.35
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update_6X.constprop.34
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[16c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[16f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[76]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[75]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[80]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>MotionFX_GetLibVersion</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_GetLibVersion))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_get_version
</UL>

<P><STRONG><a name="[133]"></a>MotionFX_MagCal_getParams</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_MagCal_getParams))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_run
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>MotionFX_MagCal_init</STRONG> (Thumb, 352 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_MagCal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MotionFX_MagCal_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSSaveMagCalNVM
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSLoadMagCalNVM
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_DataBuffInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_EmptyDataFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_stop
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_start
</UL>

<P><STRONG><a name="[93]"></a>MotionFX_MagCal_run</STRONG> (Thumb, 332 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_MagCal_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = MotionFX_MagCal_run &rArr; MEMS_runMagCal.constprop.14 &rArr; acosf &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateProcBuffer_Temp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_checkTimeToRun
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_run
</UL>

<P><STRONG><a name="[13a]"></a>MotionFX_enable_6X</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_enable_6X))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[13b]"></a>MotionFX_enable_9X</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_enable_9X))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[138]"></a>MotionFX_getKnobs</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_getKnobs))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[96]"></a>MotionFX_initialize</STRONG> (Thumb, 1092 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_setOrientation_6X.constprop.41
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_setOrientation.constprop.40
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN.isra.3
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[9a]"></a>MotionFX_propagate</STRONG> (Thumb, 2794 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_propagate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MotionFX_propagate &rArr; output_update &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
</UL>

<P><STRONG><a name="[a1]"></a>MotionFX_setKnobs</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_setKnobs))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_setOrientation_6X.constprop.41
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_setOrientation.constprop.40
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[a2]"></a>MotionFX_update</STRONG> (Thumb, 900 bytes, Stack size unknown bytes, motion_fx.o(.text.MotionFX_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MotionFX_update &rArr; iNemo_quat2heading &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update.constprop.35
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update_6X.constprop.34
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
</UL>

<P><STRONG><a name="[66]"></a>BSP_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nucleo_f401re_bus.o(i.BSP_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
<LI> iks01a2_env_sensors.o(i.HTS221_0_Probe)
</UL>
<P><STRONG><a name="[63]"></a>BSP_I2C1_DeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nucleo_f401re_bus.o(i.BSP_I2C1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_I2C1_DeInit &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspDeInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
<LI> iks01a2_env_sensors.o(i.HTS221_0_Probe)
</UL>
<P><STRONG><a name="[62]"></a>BSP_I2C1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nucleo_f401re_bus.o(i.BSP_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_I2C1_Init &rArr; MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
<LI> iks01a2_env_sensors.o(i.HTS221_0_Probe)
</UL>
<P><STRONG><a name="[64]"></a>BSP_I2C1_ReadReg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nucleo_f401re_bus.o(i.BSP_I2C1_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C1_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
<LI> iks01a2_env_sensors.o(i.HTS221_0_Probe)
</UL>
<P><STRONG><a name="[65]"></a>BSP_I2C1_WriteReg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nucleo_f401re_bus.o(i.BSP_I2C1_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C1_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iks01a2_env_sensors.o(i.LPS22HB_0_Probe)
<LI> iks01a2_env_sensors.o(i.HTS221_0_Probe)
</UL>
<P><STRONG><a name="[c0]"></a>BSP_LED_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[c3]"></a>BSP_LED_Off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FX_Data_Handler
</UL>

<P><STRONG><a name="[c4]"></a>BSP_LED_On</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FX_Data_Handler
</UL>

<P><STRONG><a name="[c5]"></a>BSP_PB_GetState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_nucleo.o(i.BSP_PB_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[c7]"></a>BSP_PB_Init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_PB_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[24]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>Error_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Error_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sensors
</UL>

<P><STRONG><a name="[db]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspDeInit
</UL>

<P><STRONG><a name="[d0]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_GPIO_Init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
</UL>

<P><STRONG><a name="[c6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[be]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[bb]"></a>HAL_I2C_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_I2C_Init</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sensors
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Sensor_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelero_Sensor_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg
</UL>

<P><STRONG><a name="[bf]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sensors
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg
</UL>

<P><STRONG><a name="[d1]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[d3]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[de]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1086 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RTC_Init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, stm32f4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM_ALGO_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM_ALGO_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM_ALGO_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HTS221_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221.o(i.HTS221_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HTS221_DeInit &rArr; HTS221_TEMP_Disable &rArr; hts221_power_on_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Disable
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>HTS221_GetCapabilities</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hts221.o(i.HTS221_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>HTS221_HUM_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hts221.o(i.HTS221_HUM_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HTS221_HUM_Disable &rArr; hts221_power_on_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>HTS221_HUM_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221.o(i.HTS221_HUM_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HTS221_HUM_Enable &rArr; hts221_power_on_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HTS221_HUM_GetHumidity</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, hts221.o(i.HTS221_HUM_GetHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HTS221_HUM_GetHumidity &rArr; hts221_humidity_raw_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_humidity_raw_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_1_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_0_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_1_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_0_get
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Interpolation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>HTS221_HUM_GetOutputDataRate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hts221.o(i.HTS221_HUM_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HTS221_HUM_GetOutputDataRate &rArr; HTS221_GetOutputDataRate &rArr; hts221_data_rate_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetOutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HTS221_HUM_SetOutputDataRate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hts221.o(i.HTS221_HUM_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HTS221_HUM_SetOutputDataRate &rArr; HTS221_SetOutputDataRate &rArr; hts221_data_rate_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_SetOutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>HTS221_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hts221.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HTS221_Init &rArr; HTS221_Initialize &rArr; HTS221_SetOutputDataRate &rArr; hts221_data_rate_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>HTS221_ReadID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hts221.o(i.HTS221_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HTS221_ReadID &rArr; hts221_device_id_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>HTS221_RegisterBusIO</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hts221.o(i.HTS221_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HTS221_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_0_Probe
</UL>

<P><STRONG><a name="[b]"></a>HTS221_TEMP_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hts221.o(i.HTS221_TEMP_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HTS221_TEMP_Disable &rArr; hts221_power_on_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HTS221_TEMP_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221.o(i.HTS221_TEMP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HTS221_TEMP_Enable &rArr; hts221_power_on_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HTS221_TEMP_GetOutputDataRate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hts221.o(i.HTS221_TEMP_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HTS221_TEMP_GetOutputDataRate &rArr; HTS221_GetOutputDataRate &rArr; hts221_data_rate_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetOutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HTS221_TEMP_GetTemperature</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, hts221.o(i.HTS221_TEMP_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HTS221_TEMP_GetTemperature &rArr; hts221_temp_deg_point_1_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temperature_raw_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_1_get
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_0_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_1_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_0_get
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Interpolation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HTS221_TEMP_SetOutputDataRate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hts221.o(i.HTS221_TEMP_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HTS221_TEMP_SetOutputDataRate &rArr; HTS221_SetOutputDataRate &rArr; hts221_data_rate_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_SetOutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>IKS01A2_ENV_SENSOR_Init</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, iks01a2_env_sensors.o(i.IKS01A2_ENV_SENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IKS01A2_ENV_SENSOR_Init &rArr; LPS22HB_0_Probe &rArr; LPS22HB_RegisterBusIO &rArr; LPS22HB_Write_Reg &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_0_Probe
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_0_Probe
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sensors
</UL>

<P><STRONG><a name="[10]"></a>LPS22HB_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lps22hb.o(i.LPS22HB_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPS22HB_DeInit &rArr; LPS22HB_TEMP_Disable &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_Disable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>LPS22HB_GetCapabilities</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lps22hb.o(i.LPS22HB_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LPS22HB_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lps22hb.o(i.LPS22HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPS22HB_Init &rArr; LPS22HB_Initialize &rArr; lps22hb_low_power_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>LPS22HB_PRESS_Disable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lps22hb.o(i.LPS22HB_PRESS_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_PRESS_Disable &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>LPS22HB_PRESS_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb.o(i.LPS22HB_PRESS_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_PRESS_Enable &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>LPS22HB_PRESS_GetOutputDataRate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb.o(i.LPS22HB_PRESS_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS22HB_PRESS_GetOutputDataRate &rArr; LPS22HB_GetOutputDataRate &rArr; lps22hb_data_rate_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_GetOutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>LPS22HB_PRESS_GetPressure</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb.o(i.LPS22HB_PRESS_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_PRESS_GetPressure &rArr; lps22hb_pressure_raw_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_pressure_raw_get
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_from_lsb_to_hpa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LPS22HB_PRESS_SetOutputDataRate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps22hb.o(i.LPS22HB_PRESS_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS22HB_PRESS_SetOutputDataRate &rArr; LPS22HB_SetOutputDataRate_When_Enabled &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SetOutputDataRate_When_Enabled
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SetOutputDataRate_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>LPS22HB_ReadID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb.o(i.LPS22HB_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_ReadID &rArr; lps22hb_device_id_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[11b]"></a>LPS22HB_RegisterBusIO</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lps22hb.o(i.LPS22HB_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_RegisterBusIO &rArr; LPS22HB_Write_Reg &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_0_Probe
</UL>

<P><STRONG><a name="[19]"></a>LPS22HB_TEMP_Disable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lps22hb.o(i.LPS22HB_TEMP_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_TEMP_Disable &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>LPS22HB_TEMP_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb.o(i.LPS22HB_TEMP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_TEMP_Enable &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>LPS22HB_TEMP_GetOutputDataRate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb.o(i.LPS22HB_TEMP_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS22HB_TEMP_GetOutputDataRate &rArr; LPS22HB_GetOutputDataRate &rArr; lps22hb_data_rate_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_GetOutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LPS22HB_TEMP_GetTemperature</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lps22hb.o(i.LPS22HB_TEMP_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_TEMP_GetTemperature &rArr; lps22hb_temperature_raw_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_temperature_raw_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_from_lsb_to_degc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LPS22HB_TEMP_SetOutputDataRate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps22hb.o(i.LPS22HB_TEMP_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS22HB_TEMP_SetOutputDataRate &rArr; LPS22HB_SetOutputDataRate_When_Enabled &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SetOutputDataRate_When_Enabled
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SetOutputDataRate_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data)
</UL>
<P><STRONG><a name="[129]"></a>LPS22HB_Write_Reg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lps22hb.o(i.LPS22HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPS22HB_Write_Reg &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_RegisterBusIO
</UL>

<P><STRONG><a name="[bd]"></a>MX_I2C1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[90]"></a>MotionFX_LoadMagCalFromNVM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_LoadMagCalFromNVM))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSloadFromNVM.isra.10
</UL>

<P><STRONG><a name="[91]"></a>MotionFX_SaveMagCalInNVM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_SaveMagCalInNVM))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSsaveInNVM.isra.11
</UL>

<P><STRONG><a name="[131]"></a>MotionFX_manager_MagCal_run</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, motionfx_manager.o(i.MotionFX_manager_MagCal_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MotionFX_manager_MagCal_run &rArr; MotionFX_MagCal_run &rArr; MEMS_runMagCal.constprop.14 &rArr; acosf &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_getParams
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_run
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
</UL>

<P><STRONG><a name="[134]"></a>MotionFX_manager_MagCal_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motionfx_manager.o(i.MotionFX_manager_MagCal_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MotionFX_manager_MagCal_start &rArr; MotionFX_MagCal_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>MotionFX_manager_MagCal_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motionfx_manager.o(i.MotionFX_manager_MagCal_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MotionFX_manager_MagCal_stop &rArr; MotionFX_MagCal_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
</UL>

<P><STRONG><a name="[135]"></a>MotionFX_manager_get_version</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, motionfx_manager.o(i.MotionFX_manager_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MotionFX_manager_get_version
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_GetLibVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MotionFX_manager_init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, motionfx_manager.o(i.MotionFX_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MotionFX_manager_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_setKnobs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_initialize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_getKnobs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_9X
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_6X
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>MotionFX_manager_run</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, motionfx_manager.o(i.MotionFX_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = MotionFX_manager_run &rArr; MotionFX_update &rArr; iNemo_quat2heading &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_update
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FX_Data_Handler
</UL>

<P><STRONG><a name="[13c]"></a>MotionFX_manager_start_9X</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, motionfx_manager.o(i.MotionFX_manager_start_9X))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MotionFX_manager_start_9X
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_9X
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[eb]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[26]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>SystemClock_Config</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, cube_hal_f4.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f5]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[149]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[157]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[141]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
</UL>

<P><STRONG><a name="[146]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[14d]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[14e]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[151]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[153]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[155]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>

<P><STRONG><a name="[156]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[159]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
</UL>

<P><STRONG><a name="[14b]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[147]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[14f]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[148]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[14a]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[143]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[145]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[158]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[152]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[173]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[174]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[175]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[144]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[8e]"></a>acosf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, acosf.o(i.acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = acosf &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
</UL>

<P><STRONG><a name="[b3]"></a>asin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = asin &rArr; __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
</UL>

<P><STRONG><a name="[150]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[ac]"></a>atan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[8d]"></a>cosf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cosf &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
</UL>

<P><STRONG><a name="[14c]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[b1]"></a>floor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[10e]"></a>hts221_block_data_update_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hts221_reg.o(i.hts221_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hts221_block_data_update_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_write_reg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Initialize
</UL>

<P><STRONG><a name="[104]"></a>hts221_data_rate_get</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hts221_reg.o(i.hts221_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hts221_data_rate_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetOutputDataRate
</UL>

<P><STRONG><a name="[110]"></a>hts221_data_rate_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hts221_reg.o(i.hts221_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hts221_data_rate_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_write_reg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_SetOutputDataRate
</UL>

<P><STRONG><a name="[10f]"></a>hts221_device_id_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_device_id_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadID
</UL>

<P><STRONG><a name="[106]"></a>hts221_hum_adc_point_0_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_hum_adc_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_hum_adc_point_0_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[108]"></a>hts221_hum_adc_point_1_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_hum_adc_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_hum_adc_point_1_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[107]"></a>hts221_hum_rh_point_0_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_hum_rh_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_hum_rh_point_0_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[109]"></a>hts221_hum_rh_point_1_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_hum_rh_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_hum_rh_point_1_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[10a]"></a>hts221_humidity_raw_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_humidity_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_humidity_raw_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[105]"></a>hts221_power_on_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hts221_reg.o(i.hts221_power_on_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hts221_power_on_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_write_reg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Disable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Enable
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Initialize
</UL>

<P><STRONG><a name="[15a]"></a>hts221_read_reg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hts221_reg.o(i.hts221_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temperature_raw_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_1_get
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_0_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_1_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_0_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_humidity_raw_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_1_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_0_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_1_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_0_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_device_id_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
</UL>

<P><STRONG><a name="[111]"></a>hts221_temp_adc_point_0_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_temp_adc_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_temp_adc_point_0_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[113]"></a>hts221_temp_adc_point_1_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_temp_adc_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_temp_adc_point_1_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[112]"></a>hts221_temp_deg_point_0_get</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hts221_reg.o(i.hts221_temp_deg_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hts221_temp_deg_point_0_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[114]"></a>hts221_temp_deg_point_1_get</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hts221_reg.o(i.hts221_temp_deg_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hts221_temp_deg_point_1_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[115]"></a>hts221_temperature_raw_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hts221_reg.o(i.hts221_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hts221_temperature_raw_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[15b]"></a>hts221_write_reg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hts221_reg.o(i.hts221_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
</UL>

<P><STRONG><a name="[123]"></a>lps22hb_auto_add_inc_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_auto_add_inc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lps22hb_auto_add_inc_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_write_reg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[122]"></a>lps22hb_block_data_update_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lps22hb_block_data_update_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_write_reg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[11d]"></a>lps22hb_data_rate_get</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lps22hb_data_rate_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_Disable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_Disable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SetOutputDataRate_When_Enabled
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_GetOutputDataRate
</UL>

<P><STRONG><a name="[120]"></a>lps22hb_data_rate_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_write_reg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_Enable
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_Disable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_Enable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_Disable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SetOutputDataRate_When_Enabled
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[128]"></a>lps22hb_device_id_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_reg.o(i.lps22hb_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lps22hb_device_id_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadID
</UL>

<P><STRONG><a name="[12b]"></a>lps22hb_from_lsb_to_degc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lps22hb_reg.o(i.lps22hb_from_lsb_to_degc))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[125]"></a>lps22hb_from_lsb_to_hpa</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lps22hb_reg.o(i.lps22hb_from_lsb_to_hpa))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_GetPressure
</UL>

<P><STRONG><a name="[121]"></a>lps22hb_low_pass_filter_mode_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_low_pass_filter_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lps22hb_low_pass_filter_mode_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_write_reg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[11f]"></a>lps22hb_low_power_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_low_power_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lps22hb_low_power_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_write_reg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[124]"></a>lps22hb_pressure_raw_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_reg.o(i.lps22hb_pressure_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lps22hb_pressure_raw_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_GetPressure
</UL>

<P><STRONG><a name="[15c]"></a>lps22hb_read_reg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_temperature_raw_get
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_pressure_raw_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_low_power_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_low_pass_filter_mode_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_device_id_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_get
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_block_data_update_set
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_auto_add_inc_set
</UL>

<P><STRONG><a name="[12a]"></a>lps22hb_temperature_raw_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_reg.o(i.lps22hb_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lps22hb_temperature_raw_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[12c]"></a>lps22hb_write_reg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lps22hb_reg.o(i.lps22hb_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hb_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_low_power_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_low_pass_filter_mode_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_block_data_update_set
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_auto_add_inc_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 274 bytes, Stack size 328 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = main &rArr; FX_Data_Handler &rArr; MotionFX_manager_run &rArr; MotionFX_update &rArr; iNemo_quat2heading &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_get_version
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_getParams
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM_ALGO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sensors
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Sensor_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FX_Data_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelero_Sensor_Handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8a]"></a>roundf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, roundf.o(i.roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = roundf &rArr; __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBufferIndex.constprop.24
</UL>

<P><STRONG><a name="[b4]"></a>sinf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
</UL>

<P><STRONG><a name="[9c]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update.constprop.35
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update_6X.constprop.34
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
</UL>

<P><STRONG><a name="[142]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[b5]"></a>tanf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tanf.o(i.tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tanf &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quatErr2EulerErr
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[103]"></a>HTS221_GetOutputDataRate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hts221.o(i.HTS221_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HTS221_GetOutputDataRate &rArr; hts221_data_rate_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetOutputDataRate
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetOutputDataRate
</UL>

<P><STRONG><a name="[10d]"></a>HTS221_Initialize</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hts221.o(i.HTS221_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HTS221_Initialize &rArr; HTS221_SetOutputDataRate &rArr; hts221_data_rate_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_SetOutputDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[10c]"></a>HTS221_SetOutputDataRate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hts221.o(i.HTS221_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HTS221_SetOutputDataRate &rArr; hts221_data_rate_set &rArr; hts221_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_SetOutputDataRate
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_SetOutputDataRate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Initialize
</UL>

<P><STRONG><a name="[10b]"></a>Linear_Interpolation</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, hts221.o(i.Linear_Interpolation))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[67]"></a>ReadRegWrap</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hts221.o(i.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(i.HTS221_RegisterBusIO)
</UL>
<P><STRONG><a name="[68]"></a>WriteRegWrap</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hts221.o(i.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(i.HTS221_RegisterBusIO)
</UL>
<P><STRONG><a name="[11c]"></a>LPS22HB_GetOutputDataRate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lps22hb.o(i.LPS22HB_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_GetOutputDataRate &rArr; lps22hb_data_rate_get &rArr; lps22hb_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_GetOutputDataRate
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_GetOutputDataRate
</UL>

<P><STRONG><a name="[11e]"></a>LPS22HB_Initialize</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lps22hb.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPS22HB_Initialize &rArr; lps22hb_low_power_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_low_power_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_low_pass_filter_mode_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_block_data_update_set
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_auto_add_inc_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Init
</UL>

<P><STRONG><a name="[127]"></a>LPS22HB_SetOutputDataRate_When_Disabled</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lps22hb.o(i.LPS22HB_SetOutputDataRate_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_SetOutputDataRate
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_SetOutputDataRate
</UL>

<P><STRONG><a name="[126]"></a>LPS22HB_SetOutputDataRate_When_Enabled</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lps22hb.o(i.LPS22HB_SetOutputDataRate_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_SetOutputDataRate_When_Enabled &rArr; lps22hb_data_rate_set &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hb_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_TEMP_SetOutputDataRate
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_PRESS_SetOutputDataRate
</UL>

<P><STRONG><a name="[69]"></a>ReadRegWrap</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lps22hb.o(i.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(i.LPS22HB_RegisterBusIO)
</UL>
<P><STRONG><a name="[6a]"></a>WriteRegWrap</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lps22hb.o(i.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(i.LPS22HB_RegisterBusIO)
</UL>
<P><STRONG><a name="[101]"></a>HTS221_0_Probe</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, iks01a2_env_sensors.o(i.HTS221_0_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HTS221_0_Probe &rArr; HTS221_ReadID &rArr; hts221_device_id_get &rArr; hts221_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_RegisterBusIO
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadID
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_ENV_SENSOR_Init
</UL>

<P><STRONG><a name="[119]"></a>LPS22HB_0_Probe</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, iks01a2_env_sensors.o(i.LPS22HB_0_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_0_Probe &rArr; LPS22HB_RegisterBusIO &rArr; LPS22HB_Write_Reg &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_RegisterBusIO
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadID
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_ENV_SENSOR_Init
</UL>

<P><STRONG><a name="[b6]"></a>Accelero_Sensor_Handler</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, main.o(i.Accelero_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Accelero_Sensor_Handler &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>FX_Data_Handler</STRONG> (Thumb, 224 bytes, Stack size 176 bytes, main.o(i.FX_Data_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = FX_Data_Handler &rArr; MotionFX_manager_run &rArr; MotionFX_update &rArr; iNemo_quat2heading &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>Gyro_Sensor_Handler</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(i.Gyro_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Gyro_Sensor_Handler &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>Init_Sensors</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, main.o(i.Init_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Init_Sensors &rArr; IKS01A2_ENV_SENSOR_Init &rArr; LPS22HB_0_Probe &rArr; LPS22HB_RegisterBusIO &rArr; LPS22HB_Write_Reg &rArr; lps22hb_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_ENV_SENSOR_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>MX_CRC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>MX_GPIO_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; BSP_PB_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>MX_TIM_ALGO_Init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, main.o(i.MX_TIM_ALGO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_TIM_ALGO_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>Magneto_Sensor_Handler</STRONG> (Thumb, 392 bytes, Stack size 72 bytes, main.o(i.Magneto_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Magneto_Sensor_Handler &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_run
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>RTC_Config</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, main.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_Config &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>RTC_TimeStampConfig</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, main.o(i.RTC_TimeStampConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_TimeStampConfig &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>I2C1_MspDeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nucleo_f401re_bus.o(i.I2C1_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C1_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[bc]"></a>I2C1_MspInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nucleo_f401re_bus.o(i.I2C1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[e2]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e3]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[117]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[d6]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d8]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[da]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[d5]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[116]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d7]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d9]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[f7]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f6]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f8]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[af]"></a>m_mldivide</STRONG> (Thumb, 892 bytes, Stack size unknown bytes, motion_fx.o(.text.m_mldivide))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[9e]"></a>m_qmult_eml</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, motion_fx.o(.text.m_qmult_eml))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
</UL>

<P><STRONG><a name="[aa]"></a>m_q2dcm_eml</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, motion_fx.o(.text.m_q2dcm_eml))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = m_q2dcm_eml &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[87]"></a>MEMS_EmptyDataFrame</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMS_EmptyDataFrame))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_DataBuffInit
</UL>

<P><STRONG><a name="[86]"></a>MEMS_DataBuffInit</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMS_DataBuffInit))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_EmptyDataFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>

<P><STRONG><a name="[95]"></a>MEMS_checkTimeToRun</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMS_checkTimeToRun))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_run
</UL>

<P><STRONG><a name="[94]"></a>updateProcBuffer_Temp</STRONG> (Thumb, 194 bytes, Stack size unknown bytes, motion_fx.o(.text.updateProcBuffer_Temp))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_run
</UL>

<P><STRONG><a name="[89]"></a>MEMS_getSensorData_I16</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMS_getSensorData_I16))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
</UL>

<P><STRONG><a name="[ae]"></a>m_dcm2q_eml</STRONG> (Thumb, 432 bytes, Stack size unknown bytes, motion_fx.o(.text.m_dcm2q_eml))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = m_dcm2q_eml &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
</UL>

<P><STRONG><a name="[a0]"></a>SpacePointGyroProp</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, motion_fx.o(.text.SpacePointGyroProp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SpacePointGyroProp &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
</UL>

<P><STRONG><a name="[a5]"></a>quatErr2EulerErr</STRONG> (Thumb, 504 bytes, Stack size unknown bytes, motion_fx.o(.text.quatErr2EulerErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = quatErr2EulerErr &rArr; tanf &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_update
</UL>

<P><STRONG><a name="[97]"></a>rt_InitInfAndNaN.isra.3</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, motion_fx.o(.text.rt_InitInfAndNaN.isra.3))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_initialize
</UL>

<P><STRONG><a name="[83]"></a>MEMSloadFromNVM.isra.10</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMSloadFromNVM.isra.10))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_LoadMagCalFromNVM
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSLoadMagCalNVM
</UL>

<P><STRONG><a name="[82]"></a>MEMSLoadMagCalNVM</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMSLoadMagCalNVM))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSloadFromNVM.isra.10
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>

<P><STRONG><a name="[85]"></a>MEMSsaveInNVM.isra.11</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMSsaveInNVM.isra.11))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_SaveMagCalInNVM
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSSaveMagCalNVM
</UL>

<P><STRONG><a name="[84]"></a>MEMSSaveMagCalNVM</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMSSaveMagCalNVM))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSsaveInNVM.isra.11
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>

<P><STRONG><a name="[8f]"></a>llEvaluate.constprop.23</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, motion_fx.o(.text.unlikely.llEvaluate.constprop.23))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
</UL>

<P><STRONG><a name="[98]"></a>iNemo_setOrientation.constprop.40</STRONG> (Thumb, 944 bytes, Stack size unknown bytes, motion_fx.o(.text.iNemo_setOrientation.constprop.40))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_setKnobs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_initialize
</UL>

<P><STRONG><a name="[99]"></a>iNemo_setOrientation_6X.constprop.41</STRONG> (Thumb, 944 bytes, Stack size unknown bytes, motion_fx.o(.text.iNemo_setOrientation_6X.constprop.41))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_setKnobs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_initialize
</UL>

<P><STRONG><a name="[8c]"></a>getMagStats.constprop.26</STRONG> (Thumb, 484 bytes, Stack size unknown bytes, motion_fx.o(.text.getMagStats.constprop.26))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
</UL>

<P><STRONG><a name="[8b]"></a>MEMS_updateMagBufferIndex.constprop.24</STRONG> (Thumb, 620 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMS_updateMagBufferIndex.constprop.24))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MEMS_updateMagBufferIndex.constprop.24 &rArr; roundf &rArr; __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal.constprop.14
</UL>

<P><STRONG><a name="[a6]"></a>iNemo_quat2heading</STRONG> (Thumb, 1312 bytes, Stack size unknown bytes, motion_fx.o(.text.iNemo_quat2heading))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = iNemo_quat2heading &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_update
</UL>

<P><STRONG><a name="[9f]"></a>output_update</STRONG> (Thumb, 1254 bytes, Stack size unknown bytes, motion_fx.o(.text.output_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = output_update &rArr; atan2 &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
</UL>

<P><STRONG><a name="[88]"></a>MEMS_runMagCal.constprop.14</STRONG> (Thumb, 9900 bytes, Stack size unknown bytes, motion_fx.o(.text.MEMS_runMagCal.constprop.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = MEMS_runMagCal.constprop.14 &rArr; acosf &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBufferIndex.constprop.24
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagStats.constprop.26
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEvaluate.constprop.23
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_getSensorData_I16
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_run
</UL>

<P><STRONG><a name="[a9]"></a>m_kalman_3gyro.isra.6.constprop.36</STRONG> (Thumb, 16252 bytes, Stack size unknown bytes, motion_fx.o(.text.m_kalman_3gyro.isra.6.constprop.36))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = m_kalman_3gyro.isra.6.constprop.36 &rArr; floor &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mldivide
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
</UL>

<P><STRONG><a name="[a7]"></a>SpacePointAlgorithm.isra.7</STRONG> (Thumb, 1000 bytes, Stack size unknown bytes, motion_fx.o(.text.SpacePointAlgorithm.isra.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SpacePointAlgorithm.isra.7 &rArr; m_kalman_3gyro.isra.6.constprop.36 &rArr; floor &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro.isra.6.constprop.36
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update.constprop.35
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_update_6X.constprop.34
</UL>

<P><STRONG><a name="[a3]"></a>iNemo_update_6X.constprop.34</STRONG> (Thumb, 1020 bytes, Stack size unknown bytes, motion_fx.o(.text.iNemo_update_6X.constprop.34))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = iNemo_update_6X.constprop.34 &rArr; SpacePointAlgorithm.isra.7 &rArr; m_kalman_3gyro.isra.6.constprop.36 &rArr; floor &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_update
</UL>

<P><STRONG><a name="[a4]"></a>iNemo_update.constprop.35</STRONG> (Thumb, 1312 bytes, Stack size unknown bytes, motion_fx.o(.text.iNemo_update.constprop.35))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = iNemo_update.constprop.35 &rArr; SpacePointAlgorithm.isra.7 &rArr; m_kalman_3gyro.isra.6.constprop.36 &rArr; floor &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm.isra.7
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_update
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
